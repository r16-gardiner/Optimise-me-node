#!/usr/bin/env node

// Import dependencies using ES6 'import' statements
// Replace this ES6 import
const app = require('../app');
const http = require('http');
const { createServer } = http;
const debug = require('debug')('lifetracker:server');

// Get port from environment or use a default value
const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

// Create HTTP server using 'createServer' from 'http' module
const server = createServer(app);

// Listen on the provided port
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const parsedPort = parseInt(val, 10);

  if (isNaN(parsedPort)) {
    return val; // Named pipe
  }

  if (parsedPort >= 0) {
    return parsedPort; // Port number
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }